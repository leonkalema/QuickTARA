"""
Add vulnerability tables

Revision ID: 003
Revises: 002
Create Date: 2025-04-26 14:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from datetime import datetime

# revision identifiers, used by Alembic.
revision = '003'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Create vulnerability table
    op.create_table('vulnerabilities',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('vulnerability_id', sa.String(), unique=True, index=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('severity', sa.String(), nullable=False),  # Values: Low, Medium, High, Critical
        sa.Column('cvss_score', sa.Float(), nullable=True),
        sa.Column('cvss_vector', sa.String(), nullable=True),
        sa.Column('affected_components', sa.JSON(), nullable=True),  # Types of components this affects
        sa.Column('attack_vector', sa.String(), nullable=True),  # Network, Adjacent, Local, Physical
        sa.Column('attack_complexity', sa.String(), nullable=True),  # Low, High
        sa.Column('privileges_required', sa.String(), nullable=True),  # None, Low, High
        sa.Column('user_interaction', sa.String(), nullable=True),  # None, Required
        sa.Column('scope', sa.String(), nullable=True),  # Unchanged, Changed
        sa.Column('confidentiality_impact', sa.String(), nullable=True),  # None, Low, High
        sa.Column('integrity_impact', sa.String(), nullable=True),  # None, Low, High
        sa.Column('availability_impact', sa.String(), nullable=True),  # None, Low, High
        sa.Column('exploitability_score', sa.Float(), nullable=True),
        sa.Column('impact_score', sa.Float(), nullable=True),
        sa.Column('created_at', sa.DateTime(), default=datetime.now),
        sa.Column('updated_at', sa.DateTime(), default=datetime.now, onupdate=datetime.now)
    )

    # Create CWE mappings table
    op.create_table('vulnerability_cwe_mapping',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('vulnerability_id', sa.String(), sa.ForeignKey('vulnerabilities.vulnerability_id'), nullable=False),
        sa.Column('cwe_id', sa.String(), nullable=False),
        sa.Column('cwe_name', sa.String(), nullable=True),
        sa.Column('cwe_description', sa.Text(), nullable=True),
        sa.Column('relationship_type', sa.String(), nullable=True),  # Direct, Parent, Child, Related
        sa.Column('created_at', sa.DateTime(), default=datetime.now)
    )
    op.create_index('idx_vulnerability_cwe', 'vulnerability_cwe_mapping', ['vulnerability_id', 'cwe_id'], unique=True)

    # Create CVE mappings table
    op.create_table('vulnerability_cve_mapping',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('vulnerability_id', sa.String(), sa.ForeignKey('vulnerabilities.vulnerability_id'), nullable=False),
        sa.Column('cve_id', sa.String(), nullable=False),
        sa.Column('cve_description', sa.Text(), nullable=True),
        sa.Column('published_date', sa.DateTime(), nullable=True),
        sa.Column('last_modified', sa.DateTime(), nullable=True),
        sa.Column('cvss_version', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), default=datetime.now)
    )
    op.create_index('idx_vulnerability_cve', 'vulnerability_cve_mapping', ['vulnerability_id', 'cve_id'], unique=True)

    # Create vulnerability assessments table (links vulnerabilities to specific components in an analysis)
    op.create_table('vulnerability_assessments',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('assessment_id', sa.String(), unique=True, index=True),
        sa.Column('analysis_id', sa.String(), sa.ForeignKey('analyses.id'), nullable=False),
        sa.Column('component_id', sa.String(), sa.ForeignKey('components.component_id'), nullable=False),
        sa.Column('vulnerability_id', sa.String(), sa.ForeignKey('vulnerabilities.vulnerability_id'), nullable=False),
        sa.Column('likelihood', sa.Integer(), nullable=False),  # 1-5 scale
        sa.Column('impact', sa.JSON(), nullable=True),  # Impact scores (financial, safety, privacy)
        sa.Column('risk_level', sa.String(), nullable=False),  # Low, Medium, High, Critical
        sa.Column('mitigation_status', sa.String(), nullable=True),  # Not Started, In Progress, Mitigated
        sa.Column('mitigation_notes', sa.Text(), nullable=True),
        sa.Column('confidence_level', sa.Float(), nullable=True),  # 0-1 confidence score
        sa.Column('detection_method', sa.String(), nullable=True),  # Manual, Automated, Hybrid
        sa.Column('created_at', sa.DateTime(), default=datetime.now),
        sa.Column('updated_at', sa.DateTime(), default=datetime.now, onupdate=datetime.now)
    )
    op.create_index('idx_assessment_component', 'vulnerability_assessments', ['analysis_id', 'component_id'])

    # Create vulnerability mitigations table
    op.create_table('vulnerability_mitigations',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('mitigation_id', sa.String(), unique=True, index=True),
        sa.Column('vulnerability_id', sa.String(), sa.ForeignKey('vulnerabilities.vulnerability_id'), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('mitigation_type', sa.String(), nullable=True),  # Preventive, Detective, Corrective
        sa.Column('effectiveness', sa.String(), nullable=True),  # Low, Medium, High
        sa.Column('implementation_cost', sa.String(), nullable=True),  # Low, Medium, High
        sa.Column('implementation_time', sa.String(), nullable=True),  # Short, Medium, Long
        sa.Column('prerequisites', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), default=datetime.now),
        sa.Column('updated_at', sa.DateTime(), default=datetime.now, onupdate=datetime.now)
    )

    # Insert some initial automotive-specific vulnerabilities
    op.execute("""
        INSERT INTO vulnerabilities (
            vulnerability_id, name, description, severity, cvss_score, 
            attack_vector, attack_complexity, privileges_required, 
            user_interaction, confidentiality_impact, integrity_impact, 
            availability_impact, affected_components
        ) VALUES 
        (
            'VULN-001', 
            'CAN Message Injection', 
            'Attacker can inject malicious messages into the CAN bus network', 
            'High', 
            7.8,
            'Adjacent',
            'Low',
            'None',
            'None',
            'Low',
            'High',
            'High',
            '["ECU", "Gateway", "Network"]'
        ),
        (
            'VULN-002', 
            'Firmware Update Manipulation', 
            'Unsigned firmware updates can be installed on ECUs', 
            'Critical', 
            9.1,
            'Network',
            'Low',
            'None',
            'None',
            'High',
            'High',
            'High',
            '["ECU", "Gateway"]'
        ),
        (
            'VULN-003', 
            'Diagnostic Interface Abuse', 
            'Diagnostic commands can be abused to override safety features', 
            'High', 
            8.2,
            'Physical',
            'Low',
            'None',
            'None',
            'High',
            'High',
            'Low',
            '["ECU", "OBD-II Port"]'
        )
    """)

    # Insert corresponding CWE mappings
    op.execute("""
        INSERT INTO vulnerability_cwe_mapping (
            vulnerability_id, cwe_id, cwe_name, relationship_type
        ) VALUES 
        ('VULN-001', 'CWE-20', 'Improper Input Validation', 'Direct'),
        ('VULN-001', 'CWE-287', 'Improper Authentication', 'Related'),
        ('VULN-002', 'CWE-347', 'Improper Verification of Cryptographic Signature', 'Direct'),
        ('VULN-002', 'CWE-494', 'Download of Code Without Integrity Check', 'Related'),
        ('VULN-003', 'CWE-285', 'Improper Authorization', 'Direct'),
        ('VULN-003', 'CWE-862', 'Missing Authorization', 'Related')
    """)


def downgrade():
    op.drop_table('vulnerability_mitigations')
    op.drop_index('idx_assessment_component', table_name='vulnerability_assessments')
    op.drop_table('vulnerability_assessments')
    op.drop_index('idx_vulnerability_cve', table_name='vulnerability_cve_mapping')
    op.drop_table('vulnerability_cve_mapping')
    op.drop_index('idx_vulnerability_cwe', table_name='vulnerability_cwe_mapping')
    op.drop_table('vulnerability_cwe_mapping')
    op.drop_table('vulnerabilities')
