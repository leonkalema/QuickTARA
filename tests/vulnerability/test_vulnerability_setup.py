#!/usr/bin/env python3
"""
Script to verify and set up vulnerability tables and data
"""
import sys
import subprocess
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from db.session import get_engine, init_db
from db.base import Base
from config.settings import load_settings

def run_command(cmd):
    """Run a command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"✓ Success: {cmd}")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"✗ Error: {cmd}")
            if result.stderr:
                print(result.stderr)
            return False
    except Exception as e:
        print(f"✗ Exception running {cmd}: {e}")
        return False

def main():
    print("QuickTARA Vulnerability Setup Verification")
    print("=========================================\n")
    
    # Step 1: Create vulnerability tables
    print("Step 1: Creating vulnerability tables...")
    if run_command("python db_create_vulnerability_tables.py"):
        print("✓ Vulnerability tables created/verified\n")
    else:
        print("✗ Failed to create vulnerability tables\n")
        sys.exit(1)
    
    # Step 2: Add sample vulnerability data
    print("Step 2: Adding sample vulnerability data...")
    if run_command("python add_vulnerability_data.py"):
        print("✓ Sample vulnerability data added/verified\n")
    else:
        print("✗ Failed to add vulnerability data\n")
        sys.exit(1)
    
    # Step 3: Final verification
    print("Step 3: Final verification...")
    try:
        engine = get_engine()
        from sqlalchemy import inspect, text
        inspector = inspect(engine)
        
        # Check tables
        tables = [
            'vulnerabilities',
            'vulnerability_cwe_mapping',
            'vulnerability_cve_mapping',
            'vulnerability_assessments',
            'vulnerability_mitigations'
        ]
        
        all_exist = True
        for table in tables:
            exists = table in inspector.get_table_names()
            if exists:
                print(f"✓ Table '{table}' exists")
                
                # Check row count
                with engine.connect() as conn:
                    result = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                    print(f"  - Contains {result} rows")
            else:
                print(f"✗ Table '{table}' is missing")
                all_exist = False
        
        if all_exist:
            print("\n✓ All vulnerability tables are set up correctly!")
            print("You can now use the vulnerability assessment features in QuickTARA.")
        else:
            print("\n✗ Some tables are missing. Please check the error messages above.")
            sys.exit(1)
    
    except Exception as e:
        print(f"✗ Error during final verification: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
