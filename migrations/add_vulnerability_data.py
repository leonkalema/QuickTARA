#!/usr/bin/env python3
"""
Script to add initial vulnerability data to the database
"""
import sys
from pathlib import Path
import uuid
from datetime import datetime

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from db.session import get_session_factory
from db.base import (
    Vulnerability, VulnerabilityCWEMapping, VulnerabilityCVEMapping, 
    VulnerabilityMitigation
)
from config.settings import load_settings

def add_automotive_vulnerabilities():
    """Add initial automotive vulnerability data"""
    settings = load_settings()
    Session = get_session_factory()
    session = Session()
    
    try:
        # Check if vulnerabilities already exist
        existing = session.query(Vulnerability).filter_by(vulnerability_id='VULN-001').first()
        if existing:
            print("Sample vulnerabilities already exist in the database.")
            return
        
        # Add initial vulnerabilities
        vulnerabilities = [
            {
                'vulnerability_id': 'VULN-001',
                'name': 'CAN Message Injection',
                'description': 'Attacker can inject malicious messages into the CAN bus network',
                'severity': 'High',
                'cvss_score': 7.8,
                'attack_vector': 'Adjacent',
                'attack_complexity': 'Low',
                'privileges_required': 'None',
                'user_interaction': 'None',
                'confidentiality_impact': 'Low',
                'integrity_impact': 'High',
                'availability_impact': 'High',
                'affected_components': '["ECU", "Gateway", "Network"]'
            },
            {
                'vulnerability_id': 'VULN-002',
                'name': 'Firmware Update Manipulation',
                'description': 'Unsigned firmware updates can be installed on ECUs',
                'severity': 'Critical',
                'cvss_score': 9.1,
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'privileges_required': 'None',
                'user_interaction': 'None',
                'confidentiality_impact': 'High',
                'integrity_impact': 'High',
                'availability_impact': 'High',
                'affected_components': '["ECU", "Gateway"]'
            },
            {
                'vulnerability_id': 'VULN-003',
                'name': 'Diagnostic Interface Abuse',
                'description': 'Diagnostic commands can be abused to override safety features',
                'severity': 'High',
                'cvss_score': 8.2,
                'attack_vector': 'Physical',
                'attack_complexity': 'Low',
                'privileges_required': 'None',
                'user_interaction': 'None',
                'confidentiality_impact': 'High',
                'integrity_impact': 'High',
                'availability_impact': 'Low',
                'affected_components': '["ECU", "OBD-II Port"]'
            }
        ]
        
        # Add vulnerabilities
        for vuln_data in vulnerabilities:
            vuln = Vulnerability(**vuln_data)
            session.add(vuln)
        
        # Add CWE mappings
        cwe_mappings = [
            {'vulnerability_id': 'VULN-001', 'cwe_id': 'CWE-20', 'cwe_name': 'Improper Input Validation', 'relationship_type': 'Direct'},
            {'vulnerability_id': 'VULN-001', 'cwe_id': 'CWE-287', 'cwe_name': 'Improper Authentication', 'relationship_type': 'Related'},
            {'vulnerability_id': 'VULN-002', 'cwe_id': 'CWE-347', 'cwe_name': 'Improper Verification of Cryptographic Signature', 'relationship_type': 'Direct'},
            {'vulnerability_id': 'VULN-002', 'cwe_id': 'CWE-494', 'cwe_name': 'Download of Code Without Integrity Check', 'relationship_type': 'Related'},
            {'vulnerability_id': 'VULN-003', 'cwe_id': 'CWE-285', 'cwe_name': 'Improper Authorization', 'relationship_type': 'Direct'},
            {'vulnerability_id': 'VULN-003', 'cwe_id': 'CWE-862', 'cwe_name': 'Missing Authorization', 'relationship_type': 'Related'}
        ]
        
        for mapping_data in cwe_mappings:
            mapping = VulnerabilityCWEMapping(**mapping_data)
            session.add(mapping)
        
        # Add mitigations
        mitigations = [
            {
                'mitigation_id': 'MIT-001-A',
                'vulnerability_id': 'VULN-001',
                'title': 'Implement Message Authentication Codes (MAC)',
                'description': 'Add cryptographic authentication to CAN messages to prevent injection attacks',
                'mitigation_type': 'Preventive',
                'effectiveness': 'High',
                'implementation_cost': 'Medium',
                'implementation_time': 'Medium'
            },
            {
                'mitigation_id': 'MIT-001-B',
                'vulnerability_id': 'VULN-001',
                'title': 'Message Rate Limiting',
                'description': 'Implement rate limiting for CAN messages to detect and prevent flooding attacks',
                'mitigation_type': 'Detective',
                'effectiveness': 'Medium',
                'implementation_cost': 'Low',
                'implementation_time': 'Short'
            },
            {
                'mitigation_id': 'MIT-002-A',
                'vulnerability_id': 'VULN-002',
                'title': 'Secure Boot Implementation',
                'description': 'Implement secure boot mechanisms to verify firmware signatures before installation',
                'mitigation_type': 'Preventive',
                'effectiveness': 'High',
                'implementation_cost': 'High',
                'implementation_time': 'Long'
            },
            {
                'mitigation_id': 'MIT-003-A',
                'vulnerability_id': 'VULN-003',
                'title': 'Diagnostic Authentication',
                'description': 'Require authentication for diagnostic commands, especially those affecting safety features',
                'mitigation_type': 'Preventive',
                'effectiveness': 'High',
                'implementation_cost': 'Medium',
                'implementation_time': 'Medium'
            }
        ]
        
        for mitigation_data in mitigations:
            mitigation = VulnerabilityMitigation(**mitigation_data)
            session.add(mitigation)
        
        session.commit()
        print("Successfully added sample vulnerability data to the database.")
        
    except Exception as e:
        session.rollback()
        print(f"Error adding vulnerability data: {e}")
        sys.exit(1)
    finally:
        session.close()

if __name__ == "__main__":
    print("Adding initial vulnerability data to QuickTARA database...")
    add_automotive_vulnerabilities()
    print("Done!")
