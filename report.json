{
  "components": {
    "ECU001": {
      "name": "Engine Control Unit",
      "type": "ECU",
      "safety_level": "ASIL D",
      "interfaces": [
        "FlexRay",
        "CAN"
      ],
      "access_points": [
        "Debug Port",
        "OBD-II"
      ],
      "data_types": [
        "Sensor Data",
        "Configuration",
        "Control Commands"
      ],
      "location": "Internal",
      "trust_zone": "Critical",
      "connected_to": [
        "ECU003",
        "SNS001",
        "ECU002"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 5,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ECU Firmware Tampering",
          "id": "AUTO-002",
          "description": "Unauthorized modification of ECU firmware causing safety issues",
          "impact": {
            "financial": 5,
            "safety": 5,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6,
          "mitigations": "Secure boot, firmware signing, and secure update procedures",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-003::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sensor Data Manipulation",
          "id": "AUTO-003",
          "description": "Tampering with sensor data leading to incorrect vehicle behavior",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 5,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "mitigations": "Data validation, plausibility checks, and sensor fusion",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-004::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Line Execution through SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
          "mitigations": "::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.199999999999999,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Malicious Files",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 3.2,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.4
          },
          "likelihood": 3.2,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data Parameter Blowup",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.",
          "mitigations": "::This attack may be mitigated completely by using a parser that is not using a vulnerable container.::Mitigation may limit the number of configuration parameters per dataset.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:231::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leverage Executable Code in Non-Executable Files",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 3.2,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Overflow Variables and Tags",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Do not trust input data from user. Validate all user input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:PeerOf:CAPEC ID:8::NATURE:PeerOf:CAPEC ID:10::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "File Discovery",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",
          "mitigations": "::Leverage file protection mechanisms to render these files accessible only to authorized parties.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malware-Directed Internal Reconnaissance",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Data Injected During Configuration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",
          "mitigations": "::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Local Execution of Code",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
          "mitigations": "::Employ robust cybersecurity training for all employees.::Implement system antivirus software that scans all attachments before opening them.::Regularly patch all software.::Execute all suspicious files in a sandbox environment.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Replace Trusted Executable",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:542::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Avoid Security Tool Identification by Adding Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:572::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Transient Instruction Execution",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
          "mitigations": "::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Software Development Tools Maliciously Altered",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",
          "mitigations": "::Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.::Avoid giving elevated privileges to developers.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::NATURE:CanPrecede:CAPEC ID:669::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Design for FPGA Maliciously Altered",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:447::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "System Build Data Maliciously Altered",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.",
          "mitigations": "::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Improperly Controlled Hardware Security Identifiers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",
          "mitigations": "::Review generation of security identifiers for design inconsistencies and common weaknesses.::Review security identifier decoders for design inconsistencies and common weaknesses.::Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DHCP Spoofing",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6,
          "description": "An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",
          "mitigations": "::Design: MAC-Forced Forwarding::Implementation: Port Security and DHCP snooping::Implementation: Network-based Intrusion Detection Systems::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:158::NATURE:CanPrecede:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4000000000000004,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4000000000000004,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 3.2,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.2,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.2,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.7000000000000001,
            "attack_surface": 1.0
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002",
                "ECU001"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "High",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Implement secure firmware update procedures",
        "Implement secure logging",
        "Use cryptographic signatures",
        "Maintain audit trails",
        "Use hardware security modules for logging",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.5",
          "description": "Software update security"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.6",
          "description": "Sensor data integrity"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        }
      ]
    },
    "ECU002": {
      "name": "Transmission Control Unit",
      "type": "ECU",
      "safety_level": "ASIL C",
      "interfaces": [
        "FlexRay",
        "CAN"
      ],
      "access_points": [
        "Debug Port"
      ],
      "data_types": [
        "Sensor Data",
        "Control Commands"
      ],
      "location": "Internal",
      "trust_zone": "Critical",
      "connected_to": [
        "ECU003",
        "ECU001"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 4.8,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ECU Firmware Tampering",
          "id": "AUTO-002",
          "description": "Unauthorized modification of ECU firmware causing safety issues",
          "impact": {
            "financial": 4.8,
            "safety": 5,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.42,
          "mitigations": "Secure boot, firmware signing, and secure update procedures",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-003::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sensor Data Manipulation",
          "id": "AUTO-003",
          "description": "Tampering with sensor data leading to incorrect vehicle behavior",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 4.8,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "mitigations": "Data validation, plausibility checks, and sensor fusion",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-004::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Line Execution through SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
          "mitigations": "::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.42,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.5999999999999996,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.84,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.2
          },
          "likelihood": 2.84,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leverage Executable Code in Non-Executable Files",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.84,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.13,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.42,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Local Execution of Code",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
          "mitigations": "::Employ robust cybersecurity training for all employees.::Implement system antivirus software that scans all attachments before opening them.::Regularly patch all software.::Execute all suspicious files in a sandbox environment.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Replace Trusted Executable",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:542::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.42,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.42,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Avoid Security Tool Identification by Adding Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:572::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Transient Instruction Execution",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
          "mitigations": "::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.42,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.13,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Improperly Controlled Hardware Security Identifiers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",
          "mitigations": "::Review generation of security identifiers for design inconsistencies and common weaknesses.::Review security identifier decoders for design inconsistencies and common weaknesses.::Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.13,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.84,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.84,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU001",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003",
                "ECU002"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "High",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Implement secure firmware update procedures",
        "Implement secure logging",
        "Use cryptographic signatures",
        "Maintain audit trails",
        "Use hardware security modules for logging",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.5",
          "description": "Software update security"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.6",
          "description": "Sensor data integrity"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        }
      ]
    },
    "ECU003": {
      "name": "Brake Control Unit",
      "type": "ECU",
      "safety_level": "ASIL D",
      "interfaces": [
        "CAN"
      ],
      "access_points": [
        "Debug Port"
      ],
      "data_types": [
        "Sensor Data",
        "Control Commands"
      ],
      "location": "Internal",
      "trust_zone": "Critical",
      "connected_to": [
        "SNS002",
        "ECU001",
        "ECU002"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 5,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ECU Firmware Tampering",
          "id": "AUTO-002",
          "description": "Unauthorized modification of ECU firmware causing safety issues",
          "impact": {
            "financial": 5,
            "safety": 5,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.42,
          "mitigations": "Secure boot, firmware signing, and secure update procedures",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-003::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sensor Data Manipulation",
          "id": "AUTO-003",
          "description": "Tampering with sensor data leading to incorrect vehicle behavior",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 5,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "mitigations": "Data validation, plausibility checks, and sensor fusion",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-004::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Line Execution through SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
          "mitigations": "::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.42,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.199999999999999,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.84,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.4
          },
          "likelihood": 2.84,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leverage Executable Code in Non-Executable Files",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.84,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.13,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.42,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Local Execution of Code",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
          "mitigations": "::Employ robust cybersecurity training for all employees.::Implement system antivirus software that scans all attachments before opening them.::Regularly patch all software.::Execute all suspicious files in a sandbox environment.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Replace Trusted Executable",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:542::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.42,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.42,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Avoid Security Tool Identification by Adding Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:572::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Transient Instruction Execution",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
          "mitigations": "::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.42,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.13,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Exploitation of Improperly Controlled Hardware Security Identifiers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",
          "mitigations": "::Review generation of security identifiers for design inconsistencies and common weaknesses.::Review security identifier decoders for design inconsistencies and common weaknesses.::Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.42,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.13,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.13,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.84,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.84,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.84,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.5,
            "attack_surface": 0.7
          },
          "attack_chains": [
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS001",
                "ECU001",
                "ECU002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            },
            {
              "chain": [
                "SNS002",
                "ECU003"
              ],
              "risk_scores": {
                "financial": 0,
                "safety": 0,
                "privacy": 0
              }
            }
          ]
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "High",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Implement secure firmware update procedures",
        "Implement secure logging",
        "Use cryptographic signatures",
        "Maintain audit trails",
        "Use hardware security modules for logging",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.5",
          "description": "Software update security"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.6",
          "description": "Sensor data integrity"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        }
      ]
    },
    "SNS001": {
      "name": "Engine Speed Sensor",
      "type": "Sensor",
      "safety_level": "ASIL B",
      "interfaces": [
        "CAN"
      ],
      "access_points": [],
      "data_types": [
        "Sensor Data"
      ],
      "location": "External",
      "trust_zone": "Untrusted",
      "connected_to": [
        "ECU001"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.0,
            "safety": 4.0,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sensor Data Manipulation",
          "id": "AUTO-003",
          "description": "Tampering with sensor data leading to incorrect vehicle behavior",
          "impact": {
            "financial": 3.0,
            "safety": 4.0,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "mitigations": "Data validation, plausibility checks, and sensor fusion",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-004::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.0,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.0,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 3.04,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.0,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.0,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.0,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 3.04,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "Low",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "Low",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.6",
          "description": "Sensor data integrity"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        }
      ]
    },
    "SNS002": {
      "name": "Wheel Speed Sensor",
      "type": "Sensor",
      "safety_level": "ASIL B",
      "interfaces": [
        "CAN"
      ],
      "access_points": [],
      "data_types": [
        "Sensor Data"
      ],
      "location": "External",
      "trust_zone": "Untrusted",
      "connected_to": [
        "ECU003"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.0,
            "safety": 4.0,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sensor Data Manipulation",
          "id": "AUTO-003",
          "description": "Tampering with sensor data leading to incorrect vehicle behavior",
          "impact": {
            "financial": 3.0,
            "safety": 4.0,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "mitigations": "Data validation, plausibility checks, and sensor fusion",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-004::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.0,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.0,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 3.04,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.0,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 3.04,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.0,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 1.52,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 1.52,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 1.52,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.52,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.52,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.2800000000000002,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 2.2800000000000002,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.0,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.0,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.0
          },
          "likelihood": 3.04,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.0,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.04,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.0
          },
          "likelihood": 3.04,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.04,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 1.0,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "Low",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "Low",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.6",
          "description": "Sensor data integrity"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-5",
          "description": "Initiation of product development at the system level"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-6",
          "description": "Software safety requirements specification"
        }
      ]
    },
    "GWY001": {
      "name": "Telematics Gateway",
      "type": "Gateway",
      "safety_level": "ASIL C",
      "interfaces": [
        "Ethernet",
        "CAN",
        "4G"
      ],
      "access_points": [
        "Debug Port",
        "USB"
      ],
      "data_types": [
        "Telemetry",
        "Diagnostic Data",
        "All Traffic"
      ],
      "location": "Internal",
      "trust_zone": "Boundary",
      "connected_to": [
        "ECU003",
        "ECU001",
        "ECU002"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 4.8,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Gateway Compromise",
          "id": "AUTO-005",
          "description": "Compromise of network gateway leading to unauthorized network access",
          "impact": {
            "financial": 4.8,
            "safety": 4.8,
            "privacy": 5
          },
          "likelihood": 2.6399999999999997,
          "mitigations": "Network segmentation, firewall rules, and intrusion detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-001::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.5999999999999996,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.2
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.7599999999999998,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 3.5199999999999996,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7599999999999998,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7599999999999998,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.7599999999999998,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.7599999999999998,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.6399999999999997,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.6399999999999997,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 3.5199999999999996,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 3.5199999999999996,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.7,
            "complexity": 0.9000000000000001,
            "attack_surface": 1.0
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "Low",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "High",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "High",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement secure logging",
        "Use cryptographic signatures",
        "Maintain audit trails",
        "Use hardware security modules for logging",
        "Encrypt sensitive data",
        "Implement access controls",
        "Minimize data exposure",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement traffic prioritization",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.2",
          "description": "Protection of external interfaces"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.3",
          "description": "Security of wireless communications"
        }
      ]
    },
    "NET001": {
      "name": "CAN Bus Network",
      "type": "Network",
      "safety_level": "ASIL C",
      "interfaces": [
        "CAN"
      ],
      "access_points": [],
      "data_types": [
        "All Traffic"
      ],
      "location": "Internal",
      "trust_zone": "Standard",
      "connected_to": [
        "GWY001",
        "ECU003",
        "ECU001",
        "ECU002"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 4.8,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.2,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.5999999999999996,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.4,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.2
          },
          "likelihood": 2.4,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.2,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.4,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.2,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.2,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.2,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.2,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.2,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.2,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.2,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Network Boundary Bridging",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",
          "mitigations": "::Design: Ensure network devices are storing credentials in encrypted stores::Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.::Configuration: When possible, configure network boundary devices to use MFA.::Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.::Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.::Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::NATURE:CanFollow:CAPEC ID:70::NATURE:CanFollow:CAPEC ID:560::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.7999999999999998,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.7999999999999998,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.4,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.4,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.4,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.4,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.6,
            "complexity": 0.6000000000000001,
            "attack_surface": 0.2
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "Low",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "Low",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "Low",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "Low",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.2.2.2",
          "description": "Security controls for vehicle systems"
        }
      ]
    },
    "ACT001": {
      "name": "Electronic Throttle",
      "type": "Actuator",
      "safety_level": "ASIL C",
      "interfaces": [
        "CAN"
      ],
      "access_points": [],
      "data_types": [
        "Control Commands"
      ],
      "location": "Internal",
      "trust_zone": "Critical",
      "connected_to": [
        "ECU001"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 4.8,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.12,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 3.5999999999999996,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.24,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.4,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.2
          },
          "likelihood": 2.24,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 2.24,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.12,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 3.5999999999999996,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 1.12,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.12,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.12,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.2,
            "privacy": 3.5999999999999996
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 1.6800000000000002,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.8,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.4
          },
          "likelihood": 2.24,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 4.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.8
          },
          "likelihood": 2.24,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.2,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "Low",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "Low",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-6",
          "description": "Technical safety requirements specification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-7",
          "description": "Software architectural design"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        }
      ]
    },
    "ACT002": {
      "name": "Brake Actuator",
      "type": "Actuator",
      "safety_level": "ASIL D",
      "interfaces": [
        "CAN"
      ],
      "access_points": [],
      "data_types": [
        "Control Commands"
      ],
      "location": "Internal",
      "trust_zone": "Critical",
      "connected_to": [
        "ECU003"
      ],
      "threats": [
        {
          "name": "CAN Injection",
          "id": "AUTO-001",
          "description": "Manipulation of CAN bus messages leading to vehicle malfunction",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 5,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "mitigations": "Implement message authentication, rate limiting, and anomaly detection",
          "related_patterns": "::NATURE:CanPrecede:CAPEC ID:AUTO-002::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Accessing Functionality Not Properly Constrained by ACLs",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
          "mitigations": "::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Environment Variables",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
          "mitigations": "::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Server Side Include (SSI) Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
          "mitigations": "::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interface Manipulation",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Interception",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.12,
          "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
          "mitigations": "::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
          "mitigations": "::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flooding",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
          "mitigations": "::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Directory Indexing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
          "mitigations": "::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Format String Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
          "mitigations": "::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
          "mitigations": "::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
          "mitigations": "::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DNS Cache Poisoning",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
          "mitigations": "::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Ping of the Death",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 4.199999999999999,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
          "mitigations": "::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:528::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Content Spoofing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
          "mitigations": "",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Delimiters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
          "mitigations": "::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:137::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Resource Location Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
          "mitigations": "::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Redirect Access to Libraries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
          "mitigations": "::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Web Application Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.24,
          "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
          "mitigations": "::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:541::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Flash Parameter Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
          "mitigations": "::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Cross-Site Flashing",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
          "mitigations": "::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:182::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Targeting Non-Script Elements",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
          "mitigations": "::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Incorrectly Configured Access Control Security Levels",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
          "mitigations": "::Design: Configure the access control correctly.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Redirection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reverse Engineering",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
          "mitigations": "::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "PHP Remote File Inclusion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
          "mitigations": "::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:253::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exponential Data Expansion",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
          "mitigations": "::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:230::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XSS Using Alternate Syntax",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Inducing Account Lockout",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
          "mitigations": "::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data External Linking",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
          "mitigations": "::Configure the serialized data processor to only retrieve external entities from trusted sources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing for application mapping",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 2.8,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
          "mitigations": "::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XML Routing Detour Attacks",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
          "mitigations": "::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 1.4
          },
          "likelihood": 2.24,
          "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
          "mitigations": "::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Serialized Data with Nested Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
          "mitigations": "::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:130::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Escaping a Sandbox by Calling Code in Another Language",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
          "mitigations": "::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:480::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
          "mitigations": "::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Deadlock",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
          "mitigations": "::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Race Conditions via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
          "mitigations": "::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:29::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Modification of Registry Run Keys",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Schema Poisoning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
          "mitigations": "::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "SOAP Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Fuzzing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
          "mitigations": "::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
          "mitigations": "::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:26::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
          "mitigations": "::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hijacking a Privileged Thread of Execution",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
          "mitigations": "::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Active OS Fingerprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:224::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Timestamp Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Sequence Number Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Greatest Common Divisor Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Counter Rate Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP (ISN) Sequence Predictability Probe",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Initial Window Size Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "TCP Options Probe",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:312::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Request Smuggling",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "HTTP Response Splitting",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",
          "mitigations": "::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Embedded Sensitive Data",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:167::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Leveraging/Manipulating Configuration File Search Paths",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Opaque Client-based Data Tokens",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 2.24,
          "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
          "mitigations": "::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Alternative IP Address Encodings",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
          "mitigations": "::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating Writeable Terminal Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
          "mitigations": "::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pretexting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
          "mitigations": "::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulate Human Behavior",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Target Influence via Framing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Influence via Psychological Principles",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
          "mitigations": "::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:416::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Exploiting Multiple Input Interpretation Layers",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
          "mitigations": "::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Overflow Binary Resource File",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
          "mitigations": "::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Development Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",
          "mitigations": "::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Design Alteration",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
          "mitigations": "::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:438::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow via Symbolic Links",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
          "mitigations": "::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "USB Memory Attacks",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
          "mitigations": "::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Signature Spoofing by Misrepresentation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
          "mitigations": "::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:473::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Passing Local Filenames to Functions That Expect a URL",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
          "mitigations": "::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:212::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Contradictory Destinations in Traffic Routing Schemes",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
          "mitigations": "::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:161::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Poison Web Service Registry",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
          "mitigations": "::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:203::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Component Substitution During Baselining",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
          "mitigations": "::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Hardware Update",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:440::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Open-Source Library Manipulation",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "ASIC With Malicious Functionality",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.12,
          "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
          "mitigations": "::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:545::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Process Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
          "mitigations": "::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Services Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",
          "mitigations": "::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Account Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",
          "mitigations": "::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Group Permission Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",
          "mitigations": "::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Owner Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
          "mitigations": "::Ensure that proper permissions on files and folders are enacted to limit accessibility.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Disable Security Software",
          "id": "",
          "impact": {
            "financial": 4.199999999999999,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
          "mitigations": "::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:176::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "System Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
          "mitigations": "::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:169::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Object Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
          "mitigations": "::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Session Credential Falsification through Prediction",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
          "mitigations": "::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:196::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Hardware Fault Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
          "mitigations": "::Implement robust physical security countermeasures and monitoring.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Carry-Off GPS Attack",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:627::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Clipboard",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 1.12,
          "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
          "mitigations": "::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
          "mitigations": "::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "DLL Side-Loading",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
          "mitigations": "::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:159::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Use of Captured Tickets (Pass The Ticket)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
          "mitigations": "::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Registries",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Collect Data from Screen Capture",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
          "mitigations": "::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:150::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Adding a Space to a File Extension",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.12,
          "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
          "mitigations": "::File extensions should be checked to see if non-visible characters are being included.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:635::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Sniff Application Code",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
          "mitigations": "::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Voice Phishing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",
          "mitigations": "::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Automated Software Update via Spoofing",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
          "mitigations": "",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:186::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Root/Jailbreak Detection Evasion via Debugging",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
          "mitigations": "::Instantiate checks within the application code that ensures debuggers are not attached.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Bluetooth Impersonation AttackS (BIAS)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
          "mitigations": "::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:616::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Key Negotiation of Bluetooth Attack (KNOB)",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
          "mitigations": "::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Alteration of a Software Update",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",
          "mitigations": "::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "String Format Overflow in syslog()",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
          "mitigations": "::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Malicious Code Implanted During Chip Programming",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.12,
          "description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
          "mitigations": "::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:444::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Retrieve Data from Decommissioned Devices",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1.4,
            "privacy": 4.199999999999999
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",
          "mitigations": "::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Subvert Code-signing Facilities",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
          "mitigations": "::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:233::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Load Value Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.12,
          "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
          "mitigations": "::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:663::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Eavesdropping on a Monitor",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
          "mitigations": "::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:651::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Blind SQL Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
          "mitigations": "::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:66::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Browser in the Middle (BiTM)",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 1.6800000000000002,
          "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
          "mitigations": "::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "URL Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
          "mitigations": "::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "User-Controlled Filename",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating State",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 1.6800000000000002,
          "description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
          "mitigations": "::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::",
          "related_patterns": "",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Manipulating User-Controlled Variables",
          "id": "",
          "impact": {
            "financial": 2.8,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
          "mitigations": "::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:22::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using Escaped Slashes in Alternate Encoding",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
          "mitigations": "::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in an API Call",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Using UTF-8 Encoding to Bypass Validation Logic",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 5,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
          "mitigations": "::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::",
          "related_patterns": "::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XPath Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
          "mitigations": "::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "XQuery Injection",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
          "mitigations": "::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:250::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "AJAX Footprinting",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 2.8
          },
          "likelihood": 2.24,
          "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
          "mitigations": "::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "OS Command Injection",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
          "mitigations": "::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:248::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Pharming",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
          "mitigations": "::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Buffer Overflow in Local Command-Line Utilities",
          "id": "",
          "impact": {
            "financial": 5,
            "safety": 1,
            "privacy": 1
          },
          "likelihood": 2.24,
          "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
          "mitigations": "::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:100::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Reflection Attack in Authentication Protocol",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
          "mitigations": "::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Forced Integer Overflow",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
          "mitigations": "::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:128::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "WSDL Scanning",
          "id": "",
          "impact": {
            "financial": 1,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
          "mitigations": "::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:54::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        },
        {
          "name": "Phishing",
          "id": "",
          "impact": {
            "financial": 1.4,
            "safety": 1,
            "privacy": 5
          },
          "likelihood": 2.24,
          "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.",
          "mitigations": "::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::",
          "related_patterns": "::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::",
          "risk_factors": {
            "exposure": 0.5,
            "complexity": 0.30000000000000004,
            "attack_surface": 0.2
          }
        }
      ],
      "stride_analysis": {
        "spoofing": {
          "risk_level": "High",
          "recommendations": []
        },
        "tampering": {
          "risk_level": "High",
          "recommendations": []
        },
        "repudiation": {
          "risk_level": "Low",
          "recommendations": []
        },
        "info_disclosure": {
          "risk_level": "Low",
          "recommendations": []
        },
        "denial_of_service": {
          "risk_level": "High",
          "recommendations": []
        },
        "elevation_of_privilege": {
          "risk_level": "High",
          "recommendations": []
        }
      },
      "recommendations": [
        "Implement strong authentication mechanisms",
        "Use secure key storage",
        "Validate message authenticity",
        "Implement hardware-based authentication",
        "Implement integrity checks",
        "Use secure boot mechanisms",
        "Validate all inputs",
        "Implement rate limiting",
        "Use redundancy mechanisms",
        "Monitor resource usage",
        "Implement principle of least privilege",
        "Use secure session management",
        "Validate authorization for all operations",
        "Implement hardware-based access control"
      ],
      "compliance": [
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.8",
          "description": "Input validation and sanitization"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 4-7",
          "description": "Hardware-software interface specification and verification"
        },
        {
          "standard": "ISO 26262",
          "requirement": "Part 6-8",
          "description": "Software unit design and implementation"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.1",
          "description": "Access control for critical vehicle systems"
        },
        {
          "standard": "UN R155",
          "requirement": "7.3.4",
          "description": "Security monitoring and incident response"
        }
      ]
    }
  }
}