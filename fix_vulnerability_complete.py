#!/usr/bin/env python3
"""
Complete fix for vulnerability models and setup
"""
import os
import sys
import subprocess
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

def check_model_conflicts():
    """Check for duplicate model definitions"""
    file_path = Path("db/base.py")
    if not file_path.exists():
        print("✗ db/base.py not found")
        return False
    
    with open(file_path, "r") as f:
        content = f.read()
    
    # Count occurrences of class Vulnerability
    vulnerability_count = content.count("class Vulnerability(Base):")
    
    if vulnerability_count > 1:
        print(f"✗ Found {vulnerability_count} Vulnerability class definitions")
        # Remove the second definition (already fixed)
        lines = content.split("\n")
        in_second_vulnerability = False
        updated_lines = []
        vulnerability_counter = 0
        
        for i, line in enumerate(lines):
            if "class Vulnerability(Base):" in line:
                vulnerability_counter += 1
                if vulnerability_counter == 2:
                    in_second_vulnerability = True
                    continue
            
            if in_second_vulnerability:
                if line.startswith("class ") and i > 0:
                    in_second_vulnerability = False
                elif line.strip() == "" and i < len(lines) - 1 and lines[i+1].startswith("class "):
                    in_second_vulnerability = False
                    continue
                else:
                    continue
            
            updated_lines.append(line)
        
        with open(file_path, "w") as f:
            f.write("\n".join(updated_lines))
        
        print("✓ Fixed duplicate Vulnerability class definition")
    else:
        print("✓ No duplicate Vulnerability class definitions")
    
    return True

def check_alembic_migrations():
    """Check if Alembic migrations are set up"""
    if not Path("alembic.ini").exists():
        print("✗ Alembic not configured (alembic.ini missing)")
        return False
    
    if not Path("db/migrations").exists():
        print("✗ Migrations directory missing")
        return False
    
    print("✓ Alembic migrations properly configured")
    return True

def run_migrations():
    """Run database migrations"""
    try:
        result = subprocess.run(
            ['alembic', 'upgrade', 'head'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("✓ Migrations applied successfully")
            return True
        else:
            print(f"✗ Migration error: {result.stderr}")
            # This is often okay if tables exist
            if "already exists" in result.stderr.lower():
                print("  (This error is normal if tables already exist)")
                return True
            return False
    except Exception as e:
        print(f"✗ Error running migrations: {e}")
        return False

def check_vulnerability_tables():
    """Check if vulnerability tables exist"""
    try:
        from db.session import get_engine
        from sqlalchemy import inspect
        
        engine = get_engine()
        inspector = inspect(engine)
        
        required_tables = [
            'vulnerabilities',
            'vulnerability_cwe_mapping',
            'vulnerability_cve_mapping',
            'vulnerability_assessments',
            'vulnerability_mitigations'
        ]
        
        existing_tables = inspector.get_table_names()
        missing_tables = [table for table in required_tables if table not in existing_tables]
        
        if missing_tables:
            print(f"✗ Missing tables: {', '.join(missing_tables)}")
            return False
        
        print("✓ All vulnerability tables exist")
        return True
    except Exception as e:
        print(f"✗ Error checking tables: {e}")
        return False

def create_tables_directly():
    """Create tables directly if migrations fail"""
    try:
        from db.session import init_db
        from config.settings import load_settings
        
        settings = load_settings()
        init_db(settings)
        
        print("✓ Tables created successfully")
        return True
    except Exception as e:
        print(f"✗ Error creating tables: {e}")
        return False

def check_application_startup():
    """Verify the application can start"""
    try:
        from api.app import create_app
        from config.settings import load_settings
        
        settings = load_settings()
        app = create_app(settings)
        
        # Check for vulnerability routes
        routes = [route.path for route in app.routes]
        vulnerability_routes = [route for route in routes if "/api/vulnerability" in route]
        
        if vulnerability_routes:
            print(f"✓ Vulnerability routes configured ({len(vulnerability_routes)} routes)")
        else:
            print("✗ No vulnerability routes found")
            return False
        
        print("✓ Application can start successfully")
        return True
    except Exception as e:
        print(f"✗ Application startup error: {e}")
        return False

def main():
    print("=== QuickTARA Vulnerability Setup Complete Fix ===\n")
    
    # Step 1: Check and fix model conflicts
    print("Step 1: Checking for model conflicts...")
    if not check_model_conflicts():
        sys.exit(1)
    
    # Step 2: Check Alembic setup
    print("\nStep 2: Checking Alembic setup...")
    if not check_alembic_migrations():
        print("  Warning: Alembic not configured, will create tables directly")
    
    # Step 3: Run migrations or create tables
    print("\nStep 3: Creating/updating database tables...")
    success = run_migrations()
    if not success:
        print("  Attempting direct table creation...")
        success = create_tables_directly()
        if not success:
            sys.exit(1)
    
    # Step 4: Verify tables exist
    print("\nStep 4: Verifying tables...")
    if not check_vulnerability_tables():
        print("  Attempting direct table creation...")
        success = create_tables_directly()
        if not success:
            sys.exit(1)
    
    # Step 5: Test application startup
    print("\nStep 5: Testing application startup...")
    if not check_application_startup():
        sys.exit(1)
    
    print("\n=== Vulnerability setup complete! ===")
    print("You can now run: python quicktara_web.py --debug")

if __name__ == "__main__":
    main()
