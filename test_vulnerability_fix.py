#!/usr/bin/env python3
"""
Test script to verify the vulnerability API fix
"""
import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

def test_import():
    """Test if imports work"""
    try:
        from api.services.vulnerability_service import get_vulnerabilities, db_vulnerability_to_model
        print("✓ Vulnerability service import successful")
        return True
    except Exception as e:
        print(f"✗ Import error: {e}")
        return False

def test_database_data():
    """Test that the data is retrieved correctly"""
    try:
        from db.session import get_session_factory
        from db.base import Vulnerability
        from api.services.vulnerability_service import db_vulnerability_to_model
        
        Session = get_session_factory()
        session = Session()
        
        # Get one vulnerability to test
        vuln = session.query(Vulnerability).first()
        
        if vuln:
            print(f"✓ Found vulnerability: {vuln.vulnerability_id}")
            print(f"  Affected components (raw): {vuln.affected_components}")
            print(f"  Affected components type: {type(vuln.affected_components)}")
            
            # Test conversion
            model = db_vulnerability_to_model(vuln)
            print(f"✓ Converted to model")
            print(f"  Affected components (model): {model.affected_components}")
            print(f"  Affected components type: {type(model.affected_components)}")
            
            if isinstance(model.affected_components, list):
                print("✓ Affected components is properly converted to a list")
            else:
                print("✗ Affected components is not a list!")
        else:
            print("✗ No vulnerabilities found in database")
        
        session.close()
        return True
    except Exception as e:
        print(f"✗ Database test error: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("Testing vulnerability fix...\n")
    
    test_import()
    test_database_data()
    
    print("\nTest complete!")

if __name__ == "__main__":
    main()
