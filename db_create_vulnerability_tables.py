#!/usr/bin/env python3
"""
Quick script to create vulnerability tables directly or run migration
"""
import os
import sys
import subprocess
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from db.session import get_engine, init_db
from db.base import Base
from config.settings import load_settings

def create_vulnerability_tables():
    """Create vulnerability tables directly"""
    try:
        # Load settings
        settings = load_settings()
        
        # Initialize database and create all tables
        init_db(settings)
        print("Database initialized - tables created successfully")
        
        # Optionally, we can also run the migration
        try:
            result = subprocess.run(
                ['alembic', 'upgrade', 'head'],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print("Migrations applied successfully")
                print(result.stdout)
            else:
                print("Warning: Migration failed (this is okay if tables already exist)")
                print(result.stderr)
        except Exception as e:
            print(f"Warning: Could not run migrations: {e}")
            print("This is okay if tables already exist")
    
    except Exception as e:
        print(f"Error creating tables: {e}")
        sys.exit(1)

def verify_vulnerability_tables():
    """Verify that vulnerability tables exist"""
    try:
        engine = get_engine()
        
        from sqlalchemy import inspect
        inspector = inspect(engine)
        
        required_tables = [
            'vulnerabilities',
            'vulnerability_cwe_mapping',
            'vulnerability_cve_mapping',
            'vulnerability_assessments',
            'vulnerability_mitigations'
        ]
        
        existing_tables = inspector.get_table_names()
        
        for table in required_tables:
            if table in existing_tables:
                print(f"✓ Table '{table}' exists")
            else:
                print(f"✗ Table '{table}' is missing")
        
        # Get column info for vulnerabilities table
        if 'vulnerabilities' in existing_tables:
            columns = inspector.get_columns('vulnerabilities')
            print("\nVulnerabilities table columns:")
            for col in columns:
                print(f"  - {col['name']}: {col['type']}")
        
    except Exception as e:
        print(f"Error verifying tables: {e}")
        sys.exit(1)

if __name__ == "__main__":
    print("Creating vulnerability tables in QuickTARA database...\n")
    
    create_vulnerability_tables()
    
    print("\nVerifying tables...")
    verify_vulnerability_tables()
    
    print("\nVulnerability tables setup completed!")
    print("You can now use the vulnerability assessment features in QuickTARA.")
