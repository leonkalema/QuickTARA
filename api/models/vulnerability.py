"""
Vulnerability models for FastAPI
"""
from enum import Enum
from typing import List, Dict, Optional, Any
from datetime import datetime
from pydantic import BaseModel, Field


class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity levels"""
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    CRITICAL = "Critical"


class AttackVector(str, Enum):
    """CVSS attack vector values"""
    NETWORK = "Network"
    ADJACENT = "Adjacent"
    LOCAL = "Local"
    PHYSICAL = "Physical"


class AttackComplexity(str, Enum):
    """CVSS attack complexity values"""
    LOW = "Low"
    HIGH = "High"


class PrivilegesRequired(str, Enum):
    """CVSS privileges required values"""
    NONE = "None"
    LOW = "Low"
    HIGH = "High"


class UserInteraction(str, Enum):
    """CVSS user interaction values"""
    NONE = "None"
    REQUIRED = "Required"


class Scope(str, Enum):
    """CVSS scope values"""
    UNCHANGED = "Unchanged"
    CHANGED = "Changed"


class ImpactLevel(str, Enum):
    """CVSS impact levels"""
    NONE = "None"
    LOW = "Low"
    HIGH = "High"


class RelationshipType(str, Enum):
    """CWE relationship types"""
    DIRECT = "Direct"
    PARENT = "Parent"
    CHILD = "Child"
    RELATED = "Related"


class MitigationType(str, Enum):
    """Vulnerability mitigation types"""
    PREVENTIVE = "Preventive"
    DETECTIVE = "Detective"
    CORRECTIVE = "Corrective"


class EffectivenessLevel(str, Enum):
    """Mitigation effectiveness levels"""
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"


class CostLevel(str, Enum):
    """Implementation cost levels"""
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"


class TimeFrame(str, Enum):
    """Implementation time frames"""
    SHORT = "Short"
    MEDIUM = "Medium"
    LONG = "Long"


class MitigationStatus(str, Enum):
    """Mitigation status types"""
    NOT_STARTED = "Not Started"
    IN_PROGRESS = "In Progress"
    MITIGATED = "Mitigated"


class DetectionMethod(str, Enum):
    """Vulnerability detection methods"""
    MANUAL = "Manual"
    AUTOMATED = "Automated"
    HYBRID = "Hybrid"


class VulnerabilityBase(BaseModel):
    """Base vulnerability attributes"""
    name: str = Field(..., description="Vulnerability name")
    description: Optional[str] = Field(None, description="Vulnerability description")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS score")
    cvss_vector: Optional[str] = Field(None, description="CVSS vector string")
    affected_components: Optional[List[str]] = Field(default_factory=list, description="Types of components this affects")
    attack_vector: Optional[AttackVector] = Field(None, description="Attack vector")
    attack_complexity: Optional[AttackComplexity] = Field(None, description="Attack complexity")
    privileges_required: Optional[PrivilegesRequired] = Field(None, description="Privileges required")
    user_interaction: Optional[UserInteraction] = Field(None, description="User interaction required")
    scope: Optional[Scope] = Field(None, description="Scope")
    confidentiality_impact: Optional[ImpactLevel] = Field(None, description="Confidentiality impact")
    integrity_impact: Optional[ImpactLevel] = Field(None, description="Integrity impact")
    availability_impact: Optional[ImpactLevel] = Field(None, description="Availability impact")
    exploitability_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="Exploitability score")
    impact_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="Impact score")


class VulnerabilityCreate(VulnerabilityBase):
    """Request model for creating a vulnerability"""
    vulnerability_id: Optional[str] = Field(None, description="Optional custom vulnerability ID")


class VulnerabilityUpdate(BaseModel):
    """Request model for updating a vulnerability"""
    name: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[VulnerabilitySeverity] = None
    cvss_score: Optional[float] = None
    cvss_vector: Optional[str] = None
    affected_components: Optional[List[str]] = None
    attack_vector: Optional[AttackVector] = None
    attack_complexity: Optional[AttackComplexity] = None
    privileges_required: Optional[PrivilegesRequired] = None
    user_interaction: Optional[UserInteraction] = None
    scope: Optional[Scope] = None
    confidentiality_impact: Optional[ImpactLevel] = None
    integrity_impact: Optional[ImpactLevel] = None
    availability_impact: Optional[ImpactLevel] = None
    exploitability_score: Optional[float] = None
    impact_score: Optional[float] = None


class Vulnerability(VulnerabilityBase):
    """Complete vulnerability model"""
    vulnerability_id: str = Field(..., description="Unique vulnerability identifier")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    
    class Config:
        from_attributes = True


class CWEMapping(BaseModel):
    """CWE mapping model"""
    cwe_id: str = Field(..., description="CWE identifier")
    cwe_name: Optional[str] = Field(None, description="CWE name")
    cwe_description: Optional[str] = Field(None, description="CWE description")
    relationship_type: Optional[RelationshipType] = Field(None, description="Relationship type")
    
    class Config:
        from_attributes = True


class CVEMapping(BaseModel):
    """CVE mapping model"""
    cve_id: str = Field(..., description="CVE identifier")
    cve_description: Optional[str] = Field(None, description="CVE description")
    published_date: Optional[datetime] = Field(None, description="Publication date")
    last_modified: Optional[datetime] = Field(None, description="Last modification date")
    cvss_version: Optional[str] = Field(None, description="CVSS version")
    
    class Config:
        from_attributes = True


class VulnerabilityMitigation(BaseModel):
    """Vulnerability mitigation model"""
    mitigation_id: str = Field(..., description="Unique mitigation identifier")
    title: str = Field(..., description="Mitigation title")
    description: Optional[str] = Field(None, description="Mitigation description")
    mitigation_type: Optional[MitigationType] = Field(None, description="Mitigation type")
    effectiveness: Optional[EffectivenessLevel] = Field(None, description="Effectiveness level")
    implementation_cost: Optional[CostLevel] = Field(None, description="Implementation cost")
    implementation_time: Optional[TimeFrame] = Field(None, description="Implementation time")
    prerequisites: Optional[List[str]] = Field(default_factory=list, description="Prerequisites")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    
    class Config:
        from_attributes = True


class VulnerabilityAssessmentCreate(BaseModel):
    """Request model for creating a vulnerability assessment"""
    component_id: str = Field(..., description="Component ID")
    vulnerability_id: str = Field(..., description="Vulnerability ID")
    likelihood: int = Field(..., ge=1, le=5, description="Likelihood score (1-5)")
    impact: Dict[str, int] = Field(..., description="Impact scores")
    risk_level: str = Field(..., description="Risk level")
    mitigation_status: Optional[MitigationStatus] = Field(None, description="Mitigation status")
    mitigation_notes: Optional[str] = Field(None, description="Mitigation notes")
    confidence_level: Optional[float] = Field(None, ge=0.0, le=1.0, description="Confidence level")
    detection_method: Optional[DetectionMethod] = Field(None, description="Detection method")


class VulnerabilityAssessment(BaseModel):
    """Vulnerability assessment model"""
    assessment_id: str = Field(..., description="Unique assessment identifier")
    analysis_id: str = Field(..., description="Analysis ID")
    component_id: str = Field(..., description="Component ID")
    vulnerability_id: str = Field(..., description="Vulnerability ID")
    likelihood: int = Field(..., ge=1, le=5, description="Likelihood score (1-5)")
    impact: Dict[str, int] = Field(..., description="Impact scores")
    risk_level: str = Field(..., description="Risk level")
    mitigation_status: Optional[MitigationStatus] = Field(None, description="Mitigation status")
    mitigation_notes: Optional[str] = Field(None, description="Mitigation notes")
    confidence_level: Optional[float] = Field(None, ge=0.0, le=1.0, description="Confidence level")
    detection_method: Optional[DetectionMethod] = Field(None, description="Detection method")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    
    class Config:
        from_attributes = True


class VulnerabilityWithMappings(Vulnerability):
    """Vulnerability with all mappings"""
    cwe_mappings: List[CWEMapping] = Field(default_factory=list, description="CWE mappings")
    cve_mappings: List[CVEMapping] = Field(default_factory=list, description="CVE mappings")
    mitigations: List[VulnerabilityMitigation] = Field(default_factory=list, description="Mitigations")


class VulnerabilityList(BaseModel):
    """List of vulnerabilities"""
    vulnerabilities: List[Vulnerability] = Field(..., description="List of vulnerabilities")
    total: int = Field(..., description="Total number of vulnerabilities")


class VulnerabilityAssessmentResult(BaseModel):
    """Result of a vulnerability assessment"""
    assessment_id: str = Field(..., description="Assessment ID")
    component_assessments: List[Dict[str, Any]] = Field(..., description="Component vulnerability assessments")
    total_components: int = Field(..., description="Total components assessed")
    total_vulnerabilities: int = Field(..., description="Total vulnerabilities found")
    high_severity_vulnerabilities: int = Field(..., description="Number of high severity vulnerabilities")
    created_at: datetime = Field(..., description="Assessment timestamp")
    scope_id: Optional[str] = Field(None, description="Scope ID if applicable")
