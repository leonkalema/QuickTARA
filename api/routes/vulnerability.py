"""
Vulnerability API routes
"""
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session

from api.deps.db import get_db
from api.models.vulnerability import (
    VulnerabilityCreate, 
    VulnerabilityUpdate, 
    VulnerabilityList,
    VulnerabilityAssessmentCreate,
    VulnerabilityAssessmentResult
)
from api.services.vulnerability_service import (
    get_vulnerability_by_id,
    get_vulnerabilities,
    count_vulnerabilities,
    create_vulnerability,
    update_vulnerability,
    delete_vulnerability,
    perform_vulnerability_assessment
)

router = APIRouter()


@router.get("", response_model=VulnerabilityList)
async def list_vulnerabilities(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    component_id: Optional[str] = Query(None, description="Filter by component ID"),
    severity: Optional[str] = Query(None, description="Filter by severity level"),
    db: Session = Depends(get_db)
):
    """
    List all vulnerabilities with optional filtering
    """
    vulnerabilities = get_vulnerabilities(
        db, 
        component_id=component_id,
        severity=severity,
        skip=skip, 
        limit=limit
    )
    total = count_vulnerabilities(db, component_id=component_id, severity=severity)
    
    return {
        "vulnerabilities": vulnerabilities,
        "total": total
    }


@router.get("/{vulnerability_id}")
async def get_vulnerability(vulnerability_id: str, db: Session = Depends(get_db)):
    """
    Get a specific vulnerability
    """
    vulnerability = get_vulnerability_by_id(db, vulnerability_id)
    
    if not vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return vulnerability


@router.post("", status_code=status.HTTP_201_CREATED)
async def create_new_vulnerability(
    vulnerability: VulnerabilityCreate, 
    db: Session = Depends(get_db)
):
    """
    Create a new vulnerability
    """
    return create_vulnerability(db, vulnerability)


@router.put("/{vulnerability_id}")
async def update_existing_vulnerability(
    vulnerability_id: str,
    vulnerability: VulnerabilityUpdate,
    db: Session = Depends(get_db)
):
    """
    Update an existing vulnerability
    """
    updated_vulnerability = update_vulnerability(db, vulnerability_id, vulnerability)
    
    if not updated_vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return updated_vulnerability


@router.delete("/{vulnerability_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_existing_vulnerability(vulnerability_id: str, db: Session = Depends(get_db)):
    """
    Delete a vulnerability
    """
    success = delete_vulnerability(db, vulnerability_id)
    
    if not success:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return None


@router.post("/assess", response_model=VulnerabilityAssessmentResult)
async def assess_vulnerabilities(
    component_ids: List[str], 
    db: Session = Depends(get_db)
):
    """
    Perform vulnerability assessment on specified components
    """
    try:
        return perform_vulnerability_assessment(db, component_ids)
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error performing vulnerability assessment: {str(e)}"
        )
